Generics:
Write a name inside angle brackets to make a generic function or type.

func makeArray<Item>(repeating item: Item, numberOfTimes: Int) -> [Item] {
    var result = [Item]()
    for _ in 0..<numberOfTimes {
         result.append(item)
    }
    return result
}
makeArray(repeating: "knock", numberOfTimes: 4)

Use where right before the body to specify a list of requirementsâ€”for example, to require the type to implement a protocol, to require two types to be the same, or to require a class to have a particular superclass.

func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> [T.Element]
    where T.Iterator.Element: Equatable, T.Iterator.Element == U.Iterator.Element {
    var values_to_return : [T.Element] = []
    for lhsItem in lhs {
        for rhsItem in rhs {
            if lhsItem == rhsItem {
                values_to_return.append(lhsItem)
            }
        }
    }
   return values_to_return
}
anyCommonElements([1, 2, 3], [3])

Note the declaration of the variable values_to_return, if it is not initialize with the = [], we'll 
have problems when using the append method or when returning at the end. Actually it is just the 
standard init of lists with python, but here we have even more options, we could have wrote : 
    var values_to_return : [T.Element] = [T.Element]
    or simply var values_to_return : [T.Element]()