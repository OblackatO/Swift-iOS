Protocols(interfaces in java): 

Like interfaces in java, but hava the following differences : 
Swift protocols can also specify properties that must be implemented (i.e. fields)
Swift protocols need to deal with value/reference through the use of the mutating keyword (because protocols can be implemented by structs and classes)
you can combine protocols at any point with the protocol<> keyword. For example, declaring a function parameter that must adhere to protocol A and B as:


/*
Use protocol to declare a protocol:

protocol ExampleProtocol {
     var simpleDescription: String { get }
     mutating func adjust()
}
*/

/*
Classes, enumerations, and structs can all adopt protocols.

class SimpleClass: ExampleProtocol {
     var simpleDescription: String = "A very simple class."
     var anotherProperty: Int = 69105
     func adjust() {
          simpleDescription += "  Now 100% adjusted."
     }
}
var a = SimpleClass()
a.adjust()
let aDescription = a.simpleDescription

struct SimpleStructure: ExampleProtocol {
     var simpleDescription: String = "A simple structure"
     mutating func adjust() {
          simpleDescription += " (adjusted)"
     }
}
var b = SimpleStructure()
b.adjust()
let bDescription = b.simpleDescription
*/

/*
Use extension to add functionality to an existing type, such as new methods and computed properties. You can use
an extension to add protocol conformance to a type that is declared elsewhere, or even to a type that you 
imported from a library or framework.

extension Int: ExampleProtocol {
    var simpleDescription: String {
        return "The number \(self)"
    }
    mutating func adjust() {
        self += 42
    }
 }
print(7.simpleDescription)

*/


/*
You can use a protocol name just like any other named type—for example, to create a collection of objects that have different types but that all conform to a single protocol. When you work with values whose type is a protocol type, methods outside the protocol definition are not available.

let protocolValue: ExampleProtocol = a
print(protocolValue.simpleDescription)
// print(protocolValue.anotherProperty)  // Uncomment to see the error

Even though the variable protocolValue has a runtime type of SimpleClass, the compiler treats it as the given type of ExampleProtocol. This means that you can’t accidentally access methods or properties that the class implements in addition to its protocol conformance.
*/
